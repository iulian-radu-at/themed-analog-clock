{"version":3,"file":"main.7c7b2d924a35e94a4f5d.bundle.js","sources":["webpack:///./src/AnalogClock.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nconst styles: { [key: string]: Theme } = {\r\n  darkTheme: {\r\n    backgroundColor: '#222222',\r\n    handColor: '#00ff7f',\r\n    tickColor: '#7fffd4'\r\n  },\r\n  lightTheme: {\r\n    backgroundColor: '#ffffff',\r\n    handColor: '#000000',\r\n    tickColor: '#444444'\r\n  }\r\n};\r\n\r\ninterface Theme {\r\n  backgroundColor: string;\r\n  handColor: string;\r\n  tickColor: string;\r\n}\r\n\r\nconst AnalogClock = ({\r\n  hours,\r\n  displayAm,\r\n  height = '100%',\r\n  minutes,\r\n  seconds,\r\n  useDarkTheme,\r\n  width = '100%'\r\n}: RenderAnalogClockProps): JSX.Element => {\r\n  const imgEl = React.useRef<SVGSVGElement>(null);\r\n  const [isTimeSet, setTimeSet] = React.useState(false);\r\n\r\n  const setInitialHandPosition = React.useCallback(() => {\r\n    const svgEl = imgEl.current;\r\n    if (svgEl === null) {\r\n      React.useEffect(() => {\r\n        setInitialHandPosition();\r\n      });\r\n      return;\r\n    }\r\n\r\n    const roundTo6deg = (deg: number) => {\r\n      return Math.floor(deg / 6) * 6;\r\n    };\r\n\r\n    const secondsDeg = roundTo6deg(360 * (seconds / 60));\r\n    const minutesDeg = 360 * ((minutes * 60 + seconds) / 3600);\r\n    const hoursDeg = 360 * ((hours * 3600 + minutes * 60 + seconds) / 43200);\r\n\r\n    svgEl.querySelector('.iconic-clock-second-hand')!.setAttribute('transform', `rotate(${secondsDeg},192,192)`);\r\n    svgEl.querySelector('.iconic-clock-minute-hand')!.setAttribute('transform', `rotate(${minutesDeg},192,192)`);\r\n    svgEl.querySelector('.iconic-clock-hour-hand')!.setAttribute('transform', `rotate(${hoursDeg},192,192)`);\r\n\r\n    setTimeSet(true);\r\n  }, [hours, minutes, seconds]);\r\n\r\n  React.useEffect(() => {\r\n    setInitialHandPosition();\r\n  }, []);\r\n\r\n  const theme: Theme = useDarkTheme ? styles.darkTheme : styles.lightTheme;\r\n\r\n  const renderTicks = () => {\r\n    const color = theme.tickColor;\r\n    let ticks = [];\r\n    for (let i = 0; i < 60; i++) {\r\n      if (i % 15 === 0) {\r\n        ticks.push(\r\n          <line\r\n            x1=\"125\"\r\n            y1=\"0\"\r\n            x2=\"175\"\r\n            y2=\"0\"\r\n            strokeWidth=\"9\"\r\n            stroke={color}\r\n            style={{ transform: `rotate(${6 * i}deg)` }}\r\n          />\r\n        );\r\n      } else if (i % 5 === 0) {\r\n        ticks.push(\r\n          <line\r\n            x1=\"145\"\r\n            y1=\"0\"\r\n            x2=\"175\"\r\n            y2=\"0\"\r\n            strokeWidth=\"6\"\r\n            stroke={color}\r\n            style={{ transform: `rotate(${6 * i}deg)` }}\r\n          />\r\n        );\r\n      } else {\r\n        ticks.push(\r\n          <line\r\n            x1=\"174\"\r\n            y1=\"0\"\r\n            x2=\"175\"\r\n            y2=\"0\"\r\n            strokeWidth=\"3\"\r\n            stroke={color}\r\n            style={{ transform: `rotate(${6 * i}deg)` }}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return ticks;\r\n  };\r\n\r\n  const stepsHand = () => {\r\n    let steps = [];\r\n    for (let i = 0; i < 60; i++) {\r\n      steps.push(`${i * 6} 192 192`);\r\n    }\r\n    return steps.join(';');\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      ref={imgEl}\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n      x={0}\r\n      y={0}\r\n      viewBox=\"0 0 384 384\"\r\n      preserveAspectRatio=\"xMidYMid meet\"\r\n      strokeWidth={1}\r\n      strokeLinecap=\"round\"\r\n      style={{\r\n        display: isTimeSet ? 'inline-block' : 'none',\r\n        overflow: 'hidden',\r\n        width,\r\n        height\r\n      }}\r\n    >\r\n      <g id=\"iconic-clock-frame\">\r\n        <circle r=\"190\" cx=\"192\" cy=\"192\" stroke=\"#444444\" strokeWidth=\"2\" fill={theme.backgroundColor} />\r\n        <text\r\n          x=\"192\"\r\n          y=\"220\"\r\n          fill={theme.handColor}\r\n          dominantBaseline=\"middle\"\r\n          textAnchor=\"middle\"\r\n          fontFamily=\"monospace\"\r\n          fontSize=\"120%\"\r\n        >\r\n          {displayAm ? 'AM' : 'PM'}\r\n        </text>\r\n      </g>\r\n      <g id=\"iconic-clock-ticks\" transform=\"translate(192, 192)\">\r\n        {renderTicks()}\r\n      </g>\r\n      <line\r\n        className=\"iconic-clock-hour-hand\"\r\n        id=\"iconic-anim-clock-hour-hand\"\r\n        fill=\"none\"\r\n        stroke={theme.handColor}\r\n        strokeWidth=\"10\"\r\n        strokeMiterlimit=\"5\"\r\n        x1=\"192\"\r\n        y1=\"192\"\r\n        x2=\"192\"\r\n        y2=\"87.5\"\r\n      />\r\n      <line\r\n        className=\"iconic-clock-minute-hand\"\r\n        id=\"iconic-anim-clock-minute-hand\"\r\n        fill=\"none\"\r\n        stroke={theme.handColor}\r\n        strokeWidth=\"6\"\r\n        strokeMiterlimit=\"5\"\r\n        x1=\"192\"\r\n        y1=\"192\"\r\n        x2=\"192\"\r\n        y2=\"54\"\r\n      />\r\n      <circle className=\"iconic-clock-axis\" cx=\"192\" cy=\"192\" r=\"9\" stroke={theme.handColor} />\r\n      <g className=\"iconic-clock-second-hand\" id=\"iconic-anim-clock-second-hand\">\r\n        <line\r\n          className=\"iconic-clock-second-hand-arm\"\r\n          x1=\"192\"\r\n          y1=\"192\"\r\n          x2=\"192\"\r\n          y2=\"28.5\"\r\n          fill=\"none\"\r\n          stroke=\"#D53A1F\"\r\n          strokeWidth=\"4\"\r\n          strokeMiterlimit=\"10\"\r\n        />\r\n        <circle\r\n          className=\"iconic-clock-second-hand-axis\"\r\n          cx=\"192\"\r\n          cy=\"192\"\r\n          r=\"4.5\"\r\n          fill=\"#D53A1F\"\r\n          stroke={theme.handColor}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          attributeType=\"xml\"\r\n          xlinkHref=\"#iconic-anim-clock-hour-hand\"\r\n          type=\"rotate\"\r\n          dur=\"43200s\"\r\n          from=\"0 192 192\"\r\n          to=\"360 192 192\"\r\n          fill=\"remove\"\r\n          restart=\"always\"\r\n          calcMode=\"linear\"\r\n          accumulate=\"none\"\r\n          additive=\"sum\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          attributeType=\"xml\"\r\n          xlinkHref=\"#iconic-anim-clock-minute-hand\"\r\n          type=\"rotate\"\r\n          dur=\"3600s\"\r\n          from=\"0 192 192\"\r\n          to=\"360 192 192\"\r\n          fill=\"remove\"\r\n          restart=\"always\"\r\n          accumulate=\"none\"\r\n          additive=\"sum\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n        <animateTransform\r\n          attributeName=\"transform\"\r\n          attributeType=\"xml\"\r\n          xlinkHref=\"#iconic-anim-clock-second-hand\"\r\n          type=\"rotate\"\r\n          dur=\"60s\"\r\n          from=\"0 192 192\"\r\n          to=\"360 192 192\"\r\n          calcMode=\"discrete\"\r\n          values={stepsHand()}\r\n          fill=\"remove\"\r\n          restart=\"always\"\r\n          accumulate=\"none\"\r\n          additive=\"sum\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </defs>\r\n    </svg>\r\n  );\r\n};\r\n\r\ninterface RenderAnalogClockProps {\r\n  hours: number;\r\n  displayAm: boolean;\r\n  height?: number | string;\r\n  minutes: number;\r\n  seconds: number;\r\n  useDarkTheme: boolean;\r\n  width?: number | string;\r\n}\r\n\r\nexport default AnalogClock;\r\n"],"mappings":"AAEA","sourceRoot":""}